name: Release Deployment

on:
  push:
    branches:
      - main

jobs:
  check_if_release:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.check.outputs.release }}
      version: ${{ steps.check.outputs.version }}
      version_major: ${{ steps.check.outputs.version_major }}
      title: ${{ steps.check.outputs.title }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if commit is release
        id: check
        run: |
          msg="${{ github.event.head_commit.message }}"
          regex="^Release ((0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-((0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?) *(: *(.*))?$"
          
          if [[ $msg =~ $regex ]]
          then
            echo "release=true" >> "$GITHUB_OUTPUT"
            echo "version=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
            echo "version_major=${BASH_REMATCH[2]}" >> "$GITHUB_OUTPUT"
            echo "title=${BASH_REMATCH[14]}" >> "$GITHUB_OUTPUT"
          else
            echo "release=false" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/setup-java@v4
        if: ${{ steps.check.outputs.release == 'true' }}
        with:
          distribution: temurin
          java-version: 24
      - uses: gradle/actions/setup-gradle@v4
        if: ${{ steps.check.outputs.release == 'true' }}
      - name: verify project version defined in gradle
        id: verify
        if: ${{ steps.check.outputs.release == 'true' }}
        run: |
          project_version=$( gradle properties -q | awk '/^version:/ {print $2}' )
          if [[ "$project_version" != "${{ steps.check.outputs.version }}" ]]; then
            echo "Project version defined in gradle is unequal to release version"
            echo "Release version: ${{ steps.check.outputs.version }}"
            echo "Project version: $project_version"
            exit 1
          fi

  javadoc:
    runs-on: ubuntu-latest
    needs: check_if_release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Find target directory
        id: target_dir
        run: |
          branch=${GITHUB_REF#refs/heads/}
          
          if [ "${{ needs.check_if_release.outputs.release }}" = "true" ]; then
            echo "name=${{ needs.check_if_release.outputs.version_major }}" >> "$GITHUB_OUTPUT"
          elif [ "$branch" == "main" ]; then
            echo "name=snapshot" >> "$GITHUB_OUTPUT"
          else
            echo "name=ignore" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/setup-java@v4
        if: ${{ steps.target_dir.outputs.name != 'ignore' }}
        with:
          distribution: temurin
          java-version: 24
      - uses: gradle/actions/setup-gradle@v4
        if: ${{ steps.target_dir.outputs.name != 'ignore' }}
      - name: Generate Documentation
        if: ${{ steps.target_dir.outputs.name != 'ignore' }}
        run: |
          gradle jda-commands:javadoc
      - name: Deploy jda-commands docs
        if: ${{ steps.target_dir.outputs.name != 'ignore' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./jda-commands/build/docs/javadoc
          branch: gh-pages
          target-folder: javadocs/${{ steps.target_dir.outputs.name }}

  wiki:
    runs-on: ubuntu-latest
    needs: check_if_release
    if: ${{ needs.check_if_release.outputs.release == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build & Deploy Wiki
        run: |
          git fetch
          git switch gh-pages
          git branch --set-upstream-to=origin/gh-pages
          git pull
          git switch wiki
          
          pip install -r requirements.txt
          
          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
          git config --global user.name github-actions[bot]
          
          mike deploy -u ${{ needs.check_if_release.outputs.version }} wiki
          mike set-default ${{ needs.check_if_release.outputs.version }}
      - name: Deploy Wiki
        run: |
          git switch gh-pages
          git push

  maven_central:
    runs-on: ubuntu-latest
    needs: check_if_release
    if: ${{ needs.check_if_release.outputs.release == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 24
      - uses: gradle/actions/setup-gradle@v4
      - name: Build and deploy
        env:
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.jreleaser_gpg_pass }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.jreleaser_gpg_public_key }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.jreleaser_gpg_secret_key }}
          JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_SONATYPE_USERNAME: ${{ secrets.jreleaser_user }}
          JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_SONATYPE_PASSWORD: ${{ secrets.jreleaser_password }}
        run: |
          gradle jreleaserDeploy

  create-gh-draft-release:
    runs-on: ubuntu-latest
    needs: [ check_if_release, maven_central ]
    if: ${{ needs.check_if_release.outputs.release == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: softprops/action-gh-release@v2
        with:
          draft: true
          name: "\U0001f680 v${{ needs.check_if_release.outputs.version }} | ${{ needs.check_if_release.outputs.title }}"
          tag_name: "v${{ needs.check_if_release.outputs.version }}"
          generate_release_notes: true
          body: |
            ## :telescope: Overview
            TBD
            
            ## :page_facing_up: Docs
            You can find the wiki for this version [here](https://kaktushose.github.io/jda-commands/${{ needs.check_if_release.outputs.version }}/).
            
            To visit this versions javadocs click [here](https://kaktushose.github.io/jda-commands/javadocs/${{ needs.check_if_release.outputs.version_major }}/).
            
            ## :package: Download / Usage
            ### Gradle
            ```kotlin
            repositories {
              mavenCentral()
            }
            
            dependencies {
              implementation("io.github.kaktushose:jda-commands:${{ needs.check_if_release.outputs.version }}")
            }
            ```
            
            ### Maven
            ```xml
            <dependency>
              <groupId>io.github.kaktushose</groupId>
              <artifactId>jda-commands</artifactId>
              <version>${{ needs.check_if_release.outputs.version }}</version>
            </dependency>
            ```
