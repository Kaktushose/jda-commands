name: Javadocs Deployment

on:
  push:
    branches:
      - main
      - deployment

jobs:
  check_if_release:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.check.outputs.release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if commit is release
        id: check
        run: |
          msg="${{ github.event.head_commit.message }}"
          regex="^Release ([0-9]+[.][0-9]+([.][0-9]+)?)$"
          
          if [[ $msg =~ $regex ]]
          then
            echo "release=true" >> "$GITHUB_OUTPUT"
            echo "version=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "release=false" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/setup-java@v4
        if: ${{ steps.check.outputs.release == 'true' }}
        with:
          distribution: 'temurin'
          java-version: '23'
      - name: verify project version defined in gradle
        id: verify
        if: ${{ steps.check.outputs.release == 'true' }}
        run: |
          project_version=$( gradle properties -q | awk '/^version:/ {print $2}' )
          if [[ "$project_version" != "${{ steps.check.outputs.version }}" ]]; then
            echo "Project version defined in gradle is unequal to release version"
            echo "Release version: ${{ steps.check.outputs.version }}"
            echo "Project version: $project_version"
            exit 1
          fi

  javadoc:
    runs-on: ubuntu-latest
    needs: check_if_release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Find target directory
        id: target_dir
        run: |
          branch=${GITHUB_REF#refs/heads/}
          
          if [ "${{ needs.check_if_release.outputs.release }}" = "true" ]; then
            major=$( echo "${{ needs.check_if_release.outputs.version }}" | grep -o '[0-9]*' | head -1 )
            echo "name=$major" >> "$GITHUB_OUTPUT"
          elif [ "$branch" == "main" ]; then
            echo "name=development" >> "$GITHUB_OUTPUT"
          else
            echo "name=ignore" >> "$GITHUB_OUTPUT"
          fi
      - name: Setup Java
        if: ${{ steps.target_dir.outputs.name != 'ignore' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
      - name: Generate Documentation
        if: ${{ steps.target_dir.outputs.name != 'ignore' }}
        run: |
          gradle jda-commands:javadoc
      - name: Deploy jda-commands docs
        if: ${{ steps.target_dir.outputs.name != 'ignore' }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./jda-commands/build/docs/javadoc
          branch: docs
          target-folder: javadocs/${{ steps.target_dir.outputs.name }}

  maven_central:
    runs-on: ubuntu-latest
    needs: check_if_release
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        if: ${{ needs.check_if_release.outputs.release == 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
      - name: Build and deploy
        if: ${{ needs.check_if_release.outputs.release == 'true' }}
        env:
          JRELEASER_GPG_PASSPHRASE: $ {{ secrets.jreleaser_gpg_pass }}
          JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_SONATYPE_USERNAME: $ {{ secrets.jreleaser_user }}
          JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_SONATYPE_PASSWORD: $ {{ secrets.jreleaser.pass }}
        run: |
          gradle jreleaserDeploy