package com.github.kaktushose.jda.commands.message.i18n;

import dev.goldmensch.fluava.Bundle;
import dev.goldmensch.fluava.Fluava;

import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

/// The default variant of [Localizer] which implements it with help of the amazing
/// [java implementation](https://github.com/Goldmensch/fluava) of project fluent.
///
/// Due to limitations set by fluent, dots contained in keys will be replaced by `-`.
/// So `my.key` becomes `my-key`. Note that all localization keys generated by jda are also
/// effected by this.
///
/// @implNote This class caches all loaded bundles.
public final class FluavaLocalizer implements Localizer {

    private final ConcurrentHashMap<String, Bundle> cache = new ConcurrentHashMap<>();

    private final Fluava fluava;

    /// @param fluava the [Fluava] instance to use
    public FluavaLocalizer(Fluava fluava) {
        this.fluava = fluava;
    }


    /// {@inheritDoc}
    /// For further information regarding functionality, you can take a look at the documentation of:
    ///
    /// - [Fluava#loadBundle(String)] for bundle loading
    /// - [Bundle#apply(java.util.Locale, java.lang.String, java.util.Map)] for localization of a given key
    ///
    /// @param locale    {@inheritDoc}
    /// @param bundle    {@inheritDoc}
    /// @param key       the key to be searched for. Note that all dots will be replaced by `-`.
    /// @param arguments {@inheritDoc}
    /// @return {@inheritDoc}
    @Override
    public Optional<String> localize(Locale locale, String bundle, String key, Map<String, Object> arguments) {
        String formattedKey = key.replace('.', '-');
        String result = cache.computeIfAbsent(bundle, fluava::loadBundle).apply(locale, formattedKey, arguments);
        return result.equals(formattedKey)
                ? Optional.empty()
                : Optional.of(result);
    }
}
